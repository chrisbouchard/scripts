#!/usr/bin/env zsh

zmodload zsh/mathfunc

si_prefixes=( '' k M G T P E Z Y )

base=1000
quiet=
space=
unit=

# This function does the heavy lifting.
reduce() {
    local value="$1"
    local i=1

    # Check if $value is numeric
    if echo "$value" | grep -Pqvx -- '-?\d*(\d\.?|\.?\d)\d*([eE]\d+)?'
    then
        error "Non-numeric value $value"
        return 1
    fi

    value=$((int(value)))

    while (( abs(value) >= base && i < ${#si_prefixes} ))
    do
        value=$((value / base))
        i=$((i + 1))
    done

    echo "${value}${space}${si_prefixes[$i]}${unit}"
}

error() {
    if [ -z "$quiet" ]
    then
        echo "si-reduce: $1"
    fi
}

die_with_usage() {
    if [ -z "$quiet" ]
    then
        error "$1"
        echo
        print_usage
    fi >&2
    exit 1
}

print_usage() {
    cat <<-EOF
	Usage:
	  si-reduce [OPTION]... [NUMBER]...
	
	Where OPTION is one of:
	  -b Use binary prefixes
	  -d Use decimal prefixes (default)
	  -h Print this help message
	  -q Supress output other than the result
	  -s Insert a space before the prefix
	  -u Display a unit after the prefix
	EOF
}

while getopts :bdhqsu: opt
do
    case "$opt" in
        b)
            base=1024 ;;
        d)
            base=1000 ;;
        h)
            print_usage
            exit ;;
        q)
            quiet=1 ;;
        s)
            space=' ' ;;
        u)
            unit="$OPTARG" ;;
        \?)
            die_with_usage "Unknown flag ${OPTARG}"
            exit 1 ;;
        :)
            die_with_usage "Missing argument for flag ${OPTARG}"
            exit 1 ;;
    esac
done

# Now that we've parsed the flags, we can move on to positional arguments
shift $((OPTIND - 1))

retval=0

if [[ -n "$1" ]]
then
    reduce "$1" || retval=1
else
    while read line
    do
        reduce "$line" || retval=1
    done
fi

exit $retval

